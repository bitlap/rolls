"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[254],{3905:(e,t,r)=>{r.d(t,{Zo:()=>d,kt:()=>f});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},d=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),p=c(r),m=i,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||l;return r?n.createElement(f,a(a({ref:t},d),{},{components:r})):n.createElement(f,a({ref:t},d))}));function f(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=r.length,a=new Array(l);a[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:i,a[1]=o;for(var c=2;c<l;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},4707:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>c});var n=r(7462),i=(r(7294),r(3905));const l={title:"CSV",custom_edit_url:"https://github.com/bitlap/rolls/edit/master/docs/csv.md"},a=void 0,o={unversionedId:"csv",id:"csv",title:"CSV",description:"Add import import bitlap.rolls.csv.*",source:"@site/../rolls-docs/target/mdoc/csv.md",sourceDirName:".",slug:"/csv",permalink:"/docs/csv",draft:!1,editUrl:"https://github.com/bitlap/rolls/edit/master/docs/csv.md",tags:[],version:"current",frontMatter:{title:"CSV",custom_edit_url:"https://github.com/bitlap/rolls/edit/master/docs/csv.md"},sidebar:"tutorialSidebar",previous:{title:"prettyToString Annotation",permalink:"/docs/prettyToString_annotation"},next:{title:"ResultSetX",permalink:"/docs/resultset_x"}},s={},c=[{value:"Read from CSV file",id:"read-from-csv-file",level:2},{value:"Basics Decoder",id:"basics-decoder",level:2},{value:"Write to CSV file",id:"write-to-csv-file",level:2},{value:"Basics Encoder",id:"basics-encoder",level:2},{value:"Configuration",id:"configuration",level:2}],d={toc:c},p="wrapper";function u(e){let{components:t,...r}=e;return(0,i.kt)(p,(0,n.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Add import ",(0,i.kt)("inlineCode",{parentName:"p"},"import bitlap.rolls.csv.*")),(0,i.kt)("h2",{id:"read-from-csv-file"},"Read from CSV file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val file = ClassLoader.getSystemResource("simple_data.csv").getFile\nval metrics: List[Metric] = CSVUtils.readCSV(file) { line =>\n  line\n    .into[Metric]\n    .withFieldComputed(_.dimensions, dims => StringUtils.extractJsonValues(dims)((k, v) => Dimension(k, v)))\n    .decode\n')),(0,i.kt)("h2",{id:"basics-decoder"},"Basics Decoder"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val obj = "hello world,2,0.4,"\n  .into[SimpleClass]\n  .withFieldComputed(_.field1, _ => 1)\n  .decode\nassertEquals(obj, SimpleClass(field1 = 1, field2 = "2", field3 = 0.4, None))\n')),(0,i.kt)("h2",{id:"write-to-csv-file"},"Write to CSV file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"if (file.exists()) file.delete() else file.createNewFile()\nval status: Boolean = CSVUtils.writeCSV(file, Metric.`simple_data_objs`) { m =>\n  m.into\n    .withFieldComputed(_.dimensions, dims => StringUtils.asJsonString(dims.map(f => f.key -> f.value).toList))\n    .encode\n}\n")),(0,i.kt)("h2",{id:"basics-encoder"},"Basics Encoder"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val simpleClass = SimpleClass(field1 = 1, field2 = "2", field3 = 0.4, None)\nval csv: String = simpleClass.into\n  .withFieldComputed(_.field1, _ => "hello world")\n  .encode\nassertEquals(csv, "hello world,2,0.4,")\n')),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"given CsvFormat = DefaultCsvFormat\n")))}u.isMDXComponent=!0}}]);