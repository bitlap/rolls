"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[630],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>b});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=a.createContext({}),c=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(o.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(t),d=r,b=u["".concat(o,".").concat(d)]||u[d]||m[d]||s;return t?a.createElement(b,l(l({ref:n},p),{},{components:t})):a.createElement(b,l({ref:n},p))}));function b(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,l=new Array(s);l[0]=d;var i={};for(var o in n)hasOwnProperty.call(n,o)&&(i[o]=n[o]);i.originalType=e,i[u]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<s;c++)l[c]=t[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4078:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const s={title:"classSchema Annotation",custom_edit_url:"https://github.com/bitlap/rolls/edit/master/docs/classSchema_annotation.md"},l=void 0,i={unversionedId:"classSchema_annotation",id:"classSchema_annotation",title:"classSchema Annotation",description:"Use @classSchema on classes",source:"@site/../rolls-docs/target/mdoc/classSchema_annotation.md",sourceDirName:".",slug:"/classSchema_annotation",permalink:"/rolls/docs/classSchema_annotation",draft:!1,editUrl:"https://github.com/bitlap/rolls/edit/master/docs/classSchema_annotation.md",tags:[],version:"current",frontMatter:{title:"classSchema Annotation",custom_edit_url:"https://github.com/bitlap/rolls/edit/master/docs/classSchema_annotation.md"},sidebar:"tutorialSidebar",previous:{title:"Quick Start",permalink:"/rolls/docs/quickstart"},next:{title:"prettyToString Annotation",permalink:"/rolls/docs/prettyToString_annotation"}},o={},c=[{value:"Use <code>@classSchema</code> on classes",id:"use-classschema-on-classes",level:2},{value:"Query Schema",id:"query-schema",level:2},{value:"Get JSON output",id:"get-json-output",level:2}],p={toc:c},u="wrapper";function m(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"use-classschema-on-classes"},"Use ",(0,r.kt)("inlineCode",{parentName:"h2"},"@classSchema")," on classes"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"@classSchema")," can be added on classes or case classes. It only resolves schemas for public concrete methods and ",(0,r.kt)("strong",{parentName:"p"},"excludes")," the methods of ",(0,r.kt)("inlineCode",{parentName:"p"},"Product")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Any"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import bitlap.rolls.core.annotations.classSchema\n@classSchema\nfinal case class SimpleClassTest () {\n  def testMethod(\n    listField: List[SubSubSubAuthPermissionPO],\n    stringField: String,\n    longOptField: Option[SubSubSubAuthPermissionPO],\n    NestedObjectField: SubSubSubAuthPermissionPO,\n    eitherField: Either[String, SubSubSubAuthPermissionPO]\n  ): SubSubSubAuthPermissionPO = ???\n}\nfinal case class SubSubSubAuthPermissionPO(list: List[String])\n")),(0,r.kt)("h2",{id:"query-schema"},"Query Schema"),(0,r.kt)("p",null,"If you are building with sbt, add the following to your ",(0,r.kt)("inlineCode",{parentName:"p"},"build.sbt"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'autoCompilerPlugins := true\naddCompilerPlugin("org.bitlap" %% "rolls-compiler-plugin" % "<version>")\nlibraryDependencies ++= Seq(\n  "org.bitlap" %% "rolls-core" % "<version>"\n)\n\nlazy val reader = scala.io.Source.fromFile("config.properties")\nlazy val config = {\n  val ret = reader.getLines().toList.map(p => s"-P:RollsCompilerPlugin:$p")\n  reader.close()\n  ret\n}\n\nscalacOptions ++= config\n')),(0,r.kt)("p",null,"Add the following properties to ",(0,r.kt)("strong",{parentName:"p"},"config.properties"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-properties"},"classSchemaPostUri=http://localhost:18000/rolls-doc     # post data\npostClassSchemaToServer=true                            # enable\nclassSchemaQueryUri=http://localhost:18000/rolls-schema # query data\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Run Server")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'sbt "rolls-server/runMain bitlap.rolls.server.HttpServer"\n')),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"curl http://localhost:18000/rolls-schema?className=SimpleClassTest")),(0,r.kt)("p",null,"By default, binary files will be stored in ",(0,r.kt)("inlineCode",{parentName:"p"},"/tmp/.compiler/classSchema_%s.txt"),", which can be configured by ",(0,r.kt)("inlineCode",{parentName:"p"},"config.properties"),"."),(0,r.kt)("h2",{id:"get-json-output"},"Get JSON output"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "className":"SimpleClassTest",\n  "methods":[\n    {\n      "methodName":"testMethod",\n      "params":[\n        {\n          "typeName":"List",\n          "fieldName":"listField",\n          "genericType":[\n            {\n              "typeName":"SubSubSubAuthPermissionPO",\n              "fields":[\n                {\n                  "typeName":"List",\n                  "fieldName":"list",\n                  "genericType":[\n                    {\n                      "typeName":"String"\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        },\n        {\n          "typeName":"String",\n          "fieldName":"stringField"\n        },\n        {\n          "typeName":"Option",\n          "fieldName":"optField",\n          "genericType":[\n            {\n              "typeName":"SubSubSubAuthPermissionPO",\n              "fields":[\n                {\n                  "typeName":"List",\n                  "fieldName":"list",\n                  "genericType":[\n                    {\n                      "typeName":"String"\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        },\n        {\n          "typeName":"SubSubSubAuthPermissionPO",\n          "fields":[\n            {\n              "typeName":"List",\n              "fieldName":"list",\n              "genericType":[\n                {\n                  "typeName":"String"\n                }\n              ]\n            }\n          ],\n          "fieldName":"NestedObjectField"\n        },\n        {\n          "typeName":"Either",\n          "fieldName":"eitherField",\n          "genericType":[\n            {\n              "typeName":"String"\n            },\n            {\n              "typeName":"SubSubSubAuthPermissionPO",\n              "fields":[\n                {\n                  "typeName":"List",\n                  "fieldName":"list",\n                  "genericType":[\n                    {\n                      "typeName":"String"\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ],\n      "resultType":{\n        "typeName":"SubSubSubAuthPermissionPO",\n        "fields":[\n          {\n            "typeName":"List",\n            "fieldName":"list",\n            "genericType":[\n              {\n                "typeName":"String"\n              }\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}\n')))}m.isMDXComponent=!0}}]);