"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[630],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>h});var a=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,s=function(e,n){if(null==e)return{};var t,a,s={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var o=a.createContext({}),c=function(e){var n=a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=c(e.components);return a.createElement(o.Provider,{value:n},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,o=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=c(t),d=s,h=p["".concat(o,".").concat(d)]||p[d]||u[d]||r;return t?a.createElement(h,i(i({ref:n},m),{},{components:t})):a.createElement(h,i({ref:n},m))}));function h(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,i=new Array(r);i[0]=d;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l[p]="string"==typeof e?e:s,i[1]=l;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4078:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=t(7462),s=(t(7294),t(3905));const r={title:"classSchema Annotation",custom_edit_url:"https://github.com/bitlap/rolls/edit/master/docs/classSchema_annotation.md"},i=void 0,l={unversionedId:"classSchema_annotation",id:"classSchema_annotation",title:"classSchema Annotation",description:"Using @classSchema on classes",source:"@site/../rolls-docs/target/mdoc/classSchema_annotation.md",sourceDirName:".",slug:"/classSchema_annotation",permalink:"/docs/classSchema_annotation",draft:!1,editUrl:"https://github.com/bitlap/rolls/edit/master/docs/classSchema_annotation.md",tags:[],version:"current",frontMatter:{title:"classSchema Annotation",custom_edit_url:"https://github.com/bitlap/rolls/edit/master/docs/classSchema_annotation.md"},sidebar:"tutorialSidebar",previous:{title:"Quick Start",permalink:"/docs/quickstart"},next:{title:"prettyToString Annotation",permalink:"/docs/prettyToString_annotation"}},o={},c=[{value:"Using <code>@classSchema</code> on classes",id:"using-classschema-on-classes",level:2},{value:"Query Schema",id:"query-schema",level:2},{value:"Json Result",id:"json-result",level:2}],m={toc:c},p="wrapper";function u(e){let{components:n,...t}=e;return(0,s.kt)(p,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"using-classschema-on-classes"},"Using ",(0,s.kt)("inlineCode",{parentName:"h2"},"@classSchema")," on classes"),(0,s.kt)("p",null,(0,s.kt)("strong",{parentName:"p"},"@classSchema")," can be added on classes or case classes. It only resolves schemas for public concrete methods and ",(0,s.kt)("strong",{parentName:"p"},"excludes")," the methods of ",(0,s.kt)("inlineCode",{parentName:"p"},"Product")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"Any"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"@classSchema\nfinal case class SimpleClassTest () {\n  def testMethod(\n    listField: List[SubSubSubAuthPermissionPO],\n    stringField: String,\n    longOptField: Option[SubSubSubAuthPermissionPO],\n    NestedObjectField: SubSubSubAuthPermissionPO,\n    eitherField: Either[String, SubSubSubAuthPermissionPO]\n  ): SubSubSubAuthPermissionPO = ???\n}\nfinal case class SubSubSubAuthPermissionPO(list: List[String])\n")),(0,s.kt)("h2",{id:"query-schema"},"Query Schema"),(0,s.kt)("p",null,"curl ",(0,s.kt)("inlineCode",{parentName:"p"},"http://localhost:18000/rolls-schema?className=SimpleClassTest")),(0,s.kt)("p",null,"It needs configs:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-properties"},"classSchemaPostUri=http://localhost:18000/rolls-doc     # post data\npostClassSchemaToServer=true                            # enable\nclassSchemaQueryUri=http://localhost:18000/rolls-schema # query data\n")),(0,s.kt)("p",null,"By default, binary files will be stored in ",(0,s.kt)("inlineCode",{parentName:"p"},"/tmp/.compiler/classSchema_%s.txt"),", which can be configured by ",(0,s.kt)("inlineCode",{parentName:"p"},"config.properties"),"."),(0,s.kt)("h2",{id:"json-result"},"Json Result"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "className":"SimpleClassTest",\n  "methods":[\n    {\n      "methodName":"testMethod",\n      "params":[\n        {\n          "typeName":"List",\n          "fieldName":"listField",\n          "genericType":[\n            {\n              "typeName":"SubSubSubAuthPermissionPO",\n              "fields":[\n                {\n                  "typeName":"List",\n                  "fieldName":"list",\n                  "genericType":[\n                    {\n                      "typeName":"String"\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        },\n        {\n          "typeName":"String",\n          "fieldName":"stringField"\n        },\n        {\n          "typeName":"Option",\n          "fieldName":"optField",\n          "genericType":[\n            {\n              "typeName":"SubSubSubAuthPermissionPO",\n              "fields":[\n                {\n                  "typeName":"List",\n                  "fieldName":"list",\n                  "genericType":[\n                    {\n                      "typeName":"String"\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        },\n        {\n          "typeName":"SubSubSubAuthPermissionPO",\n          "fields":[\n            {\n              "typeName":"List",\n              "fieldName":"list",\n              "genericType":[\n                {\n                  "typeName":"String"\n                }\n              ]\n            }\n          ],\n          "fieldName":"NestedObjectField"\n        },\n        {\n          "typeName":"Either",\n          "fieldName":"eitherField",\n          "genericType":[\n            {\n              "typeName":"String"\n            },\n            {\n              "typeName":"SubSubSubAuthPermissionPO",\n              "fields":[\n                {\n                  "typeName":"List",\n                  "fieldName":"list",\n                  "genericType":[\n                    {\n                      "typeName":"String"\n                    }\n                  ]\n                }\n              ]\n            }\n          ]\n        }\n      ],\n      "resultType":{\n        "typeName":"SubSubSubAuthPermissionPO",\n        "fields":[\n          {\n            "typeName":"List",\n            "fieldName":"list",\n            "genericType":[\n              {\n                "typeName":"String"\n              }\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}\n')))}u.isMDXComponent=!0}}]);