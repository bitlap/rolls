"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[254],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>v});var i=t(7294);function s(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){s(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,i,s=function(e,n){if(null==e)return{};var t,i,s={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(s[t]=e[t]);return s}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var a=i.createContext({}),c=function(e){var n=i.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=c(e.components);return i.createElement(a.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,s=e.mdxType,r=e.originalType,a=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=c(t),u=s,v=d["".concat(a,".").concat(u)]||d[u]||p[u]||r;return t?i.createElement(v,l(l({ref:n},m),{},{components:t})):i.createElement(v,l({ref:n},m))}));function v(e,n){var t=arguments,s=n&&n.mdxType;if("string"==typeof e||s){var r=t.length,l=new Array(r);l[0]=u;var o={};for(var a in n)hasOwnProperty.call(n,a)&&(o[a]=n[a]);o.originalType=e,o[d]="string"==typeof e?e:s,l[1]=o;for(var c=2;c<r;c++)l[c]=t[c];return i.createElement.apply(null,l)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},4707:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>p,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var i=t(7462),s=(t(7294),t(3905));const r={title:"CSV",custom_edit_url:"https://github.com/bitlap/rolls/edit/master/docs/csv.md"},l=void 0,o={unversionedId:"csv",id:"csv",title:"CSV",description:"Installation using SBT (Recommended)",source:"@site/../rolls-docs/target/mdoc/csv.md",sourceDirName:".",slug:"/csv",permalink:"/rolls/docs/csv",draft:!1,editUrl:"https://github.com/bitlap/rolls/edit/master/docs/csv.md",tags:[],version:"current",frontMatter:{title:"CSV",custom_edit_url:"https://github.com/bitlap/rolls/edit/master/docs/csv.md"},sidebar:"tutorialSidebar",previous:{title:"prettyToString Annotation",permalink:"/rolls/docs/prettyToString_annotation"},next:{title:"ResultSetX",permalink:"/rolls/docs/resultset_x"}},a={},c=[{value:"Installation using SBT (Recommended)",id:"installation-using-sbt-recommended",level:2},{value:"Read from CSV file",id:"read-from-csv-file",level:2},{value:"Basics Decoder",id:"basics-decoder",level:2},{value:"Write to CSV file",id:"write-to-csv-file",level:2},{value:"Basics Encoder",id:"basics-encoder",level:2},{value:"Configuration",id:"configuration",level:2}],m={toc:c},d="wrapper";function p(e){let{components:n,...t}=e;return(0,s.kt)(d,(0,i.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"installation-using-sbt-recommended"},"Installation using SBT (Recommended)"),(0,s.kt)("p",null,"If you are building with sbt, add the following to your ",(0,s.kt)("inlineCode",{parentName:"p"},"build.sbt"),":"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies ++= Seq(\n  "org.bitlap" %% "rolls-csv" % "<version>"\n)\n')),(0,s.kt)("p",null,"Add import:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"import bitlap.rolls.csv.*\n\n// example classes\nfinal case class Dimension(key: String, value: String)\nfinal case class Metric(time: Long, entity: Int, dimensions: List[Dimension], metricName: String, metricValue: Int)\n")),(0,s.kt)("h2",{id:"read-from-csv-file"},"Read from CSV file"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import bitlap.rolls.csv.CSVUtils.FileName\n\nval file = ClassLoader.getSystemResource("simple_data.csv").getFile\nval metrics: LazyList[Metric] = CSVUtils.readCSV(FileName(file)) { line =>\n  line\n    .into[Metric]\n    .withFieldComputed(_.dimensions, dims => StringUtils.extractJsonValues(dims)((k, v) => Dimension(k, v)))\n    .decode\n}\n')),(0,s.kt)("h2",{id:"basics-decoder"},"Basics Decoder"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'final case class SimpleClass(field1: Int, field2: String, field3: Double, field4Opt: Option[String])\n\nval obj = "hello world,2,0.4,"\n  .into[SimpleClass]\n  .withFieldComputed(_.field1, _ => 1)\n  .decode\n// obj: SimpleClass = SimpleClass(\n//   field1 = 1,\n//   field2 = "2",\n//   field3 = 0.4,\n//   field4Opt = None\n// )\n')),(0,s.kt)("h2",{id:"write-to-csv-file"},"Write to CSV file"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import java.io.File\n\nobject Metric:\n\n  lazy val `simple_data_objs` = List(\n      Metric(100, 1, List(Dimension("city", "\u5317\u4eac"), Dimension("os", "Mac")), "vv", 1),\n      Metric(100, 1, List(Dimension("city", "\u5317\u4eac"), Dimension("os", "Mac")), "pv", 2),\n      Metric(100, 1, List(Dimension("city", "\u5317\u4eac"), Dimension("os", "Windows")), "vv", 1),\n      Metric(100, 1, List(Dimension("city", "\u5317\u4eac"), Dimension("os", "Windows")), "pv", 3),\n      Metric(100, 2, List(Dimension("city", "\u5317\u4eac"), Dimension("os", "Mac")), "vv", 1),\n      Metric(100, 2, List(Dimension("city", "\u5317\u4eac"), Dimension("os", "Mac")), "pv", 5),\n      Metric(100, 3, List(Dimension("city", "\u5317\u4eac"), Dimension("os", "Mac")), "vv", 1),\n      Metric(100, 3, List(Dimension("city", "\u5317\u4eac"), Dimension("os", "Mac")), "pv", 2),\n      Metric(200, 1, List(Dimension("city", "\u5317\u4eac"), Dimension("os", "Mac")), "vv", 1),\n      Metric(200, 1, List(Dimension("city", "\u5317\u4eac"), Dimension("os", "Mac")), "pv", 2),\n      Metric(200, 1, List(Dimension("city", "\u5317\u4eac"), Dimension("os", "Windows")), "vv", 1),\n      Metric(200, 1, List(Dimension("city", "\u5317\u4eac"), Dimension("os", "Windows")), "pv", 3),\n      Metric(200, 2, List(Dimension("city", "\u5317\u4eac"), Dimension("os", "Mac")), "vv", 1),\n      Metric(200, 2, List(Dimension("city", "\u5317\u4eac"), Dimension("os", "Mac")), "pv", 5),\n      Metric(200, 3, List(Dimension("city", "\u5317\u4eac"), Dimension("os", "Mac")), "vv", 1),\n      Metric(200, 3, List(Dimension("city", "\u5317\u4eac"), Dimension("os", "Mac")), "pv", 2)\n    )\nend Metric\n\nval storeFile = new File("./simple_data.csv")\n// storeFile: File = ./simple_data.csv\n\nif (storeFile.exists()) storeFile.delete() else storeFile.createNewFile()\n// res0: Boolean = true\nval status: Boolean = CSVUtils.writeCSV(storeFile, Metric.`simple_data_objs`) { m =>\n  m.into\n    .withFieldComputed(_.dimensions, dims => StringUtils.asJsonString(dims.map(f => f.key -> f.value).toList))\n    .encode\n}\n// status: Boolean = true\nstoreFile.delete()\n// res1: Boolean = true\n')),(0,s.kt)("h2",{id:"basics-encoder"},"Basics Encoder"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'val simpleClass = SimpleClass(field1 = 1, field2 = "2", field3 = 0.4, None)\n// simpleClass: SimpleClass = SimpleClass(\n//   field1 = 1,\n//   field2 = "2",\n//   field3 = 0.4,\n//   field4Opt = None\n// )\nval csv: String = simpleClass.into\n  .withFieldComputed(_.field1, _ => "hello world")\n  .encode\n// csv: String = "hello world,2,0.4,"\n')),(0,s.kt)("h2",{id:"configuration"},"Configuration"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},"given CSVFormat = DefaultCSVFormat\n")))}p.isMDXComponent=!0}}]);