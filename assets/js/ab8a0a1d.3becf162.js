"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[254],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var i=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,l=function(e,t){if(null==e)return{};var n,i,l={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=i.createContext({}),c=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return i.createElement(o.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(n),u=l,f=m["".concat(o,".").concat(u)]||m[u]||p[u]||r;return n?i.createElement(f,a(a({ref:t},d),{},{components:n})):i.createElement(f,a({ref:t},d))}));function f(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,a=new Array(r);a[0]=u;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[m]="string"==typeof e?e:l,a[1]=s;for(var c=2;c<r;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4707:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var i=n(7462),l=(n(7294),n(3905));const r={title:"CSV",custom_edit_url:"https://github.com/bitlap/rolls/edit/master/docs/csv.md"},a=void 0,s={unversionedId:"csv",id:"csv",title:"CSV",description:"Installation using SBT (Recommended)",source:"@site/../rolls-docs/target/mdoc/csv.md",sourceDirName:".",slug:"/csv",permalink:"/rolls/docs/csv",draft:!1,editUrl:"https://github.com/bitlap/rolls/edit/master/docs/csv.md",tags:[],version:"current",frontMatter:{title:"CSV",custom_edit_url:"https://github.com/bitlap/rolls/edit/master/docs/csv.md"},sidebar:"tutorialSidebar",previous:{title:"prettyToString Annotation",permalink:"/rolls/docs/prettyToString_annotation"},next:{title:"ResultSetX",permalink:"/rolls/docs/resultset_x"}},o={},c=[{value:"Installation using SBT (Recommended)",id:"installation-using-sbt-recommended",level:2},{value:"Read from CSV file",id:"read-from-csv-file",level:2},{value:"Basics Decoder",id:"basics-decoder",level:2},{value:"Write to CSV file",id:"write-to-csv-file",level:2},{value:"Basics Encoder",id:"basics-encoder",level:2},{value:"Configuration",id:"configuration",level:2}],d={toc:c},m="wrapper";function p(e){let{components:t,...n}=e;return(0,l.kt)(m,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"installation-using-sbt-recommended"},"Installation using SBT (Recommended)"),(0,l.kt)("p",null,"This simple csv tool is specifically to handle one-dimensional text, but allows for custom parsing of column values for complex structures within it."),(0,l.kt)("p",null,"If you are building with sbt, add the following to your ",(0,l.kt)("inlineCode",{parentName:"p"},"build.sbt"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'libraryDependencies ++= Seq(\n  "org.bitlap" %% "rolls-csv" % "<version>"\n)\n')),(0,l.kt)("p",null,"Add import:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"import bitlap.rolls.csv.*\n\n// example classes\nfinal case class Dimension(key: String, value: String)\nfinal case class Metric(time: Long, entity: Int, dimensions: List[Dimension], metricName: String, metricValue: Int)\n")),(0,l.kt)("h2",{id:"read-from-csv-file"},"Read from CSV file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import bitlap.rolls.csv.CSVUtils.FileName\n\nval file = ClassLoader.getSystemResource("simple_data.csv").getFile\nval (metadata, metrics) = CSVUtils.readCSV(FileName(file)) { line =>\n  line\n    .into[Metric]\n    .withFieldComputed(_.dimensions, dims => StringUtils.asClasses(dims)((k, v) => Dimension(k, v)))\n    .decode\n}\n')),(0,l.kt)("h2",{id:"basics-decoder"},"Basics Decoder"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'final case class SimpleClass(field1: Int, field2: String, field3: Double, field4Opt: Option[String])\n\nval obj = "hello world,2,0.4,"\n  .into[SimpleClass]\n  .withFieldComputed(_.field1, _ => 1)\n  .decode\n// obj: SimpleClass = SimpleClass(\n//   field1 = 1,\n//   field2 = "2",\n//   field3 = 0.4,\n//   field4Opt = None\n// )\n')),(0,l.kt)("h2",{id:"write-to-csv-file"},"Write to CSV file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import java.io.File\nimport bitlap.rolls.csv.CSVUtils.*\n\nobject Metric:\n  lazy val `simple_data_objs` = List(\n      Metric(100, 1, List(Dimension("city", "\u5317\u4eac"), Dimension("os", "Mac")), "vv", 1),\n      Metric(100, 1, List(Dimension("city", "\u5317\u4eac"), Dimension("os", "Mac")), "pv", 2),\n    )\nend Metric\n\nval fileName = FileName("./simple_data.csv")\n// fileName: FileName = "./simple_data.csv"\nval status = CSVUtils.writeCSV(fileName, Metric.`simple_data_objs`) { m =>\n  m.into\n    .withFieldComputed(_.dimensions, dims => StringUtils.asString(dims.map(f => f.key -> f.value).toList))\n    .encode\n}\n// status: Boolean = true\n')),(0,l.kt)("h2",{id:"basics-encoder"},"Basics Encoder"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'val simpleClass = SimpleClass(field1 = 1, field2 = "2", field3 = 0.4, None)\n// simpleClass: SimpleClass = SimpleClass(\n//   field1 = 1,\n//   field2 = "2",\n//   field3 = 0.4,\n//   field4Opt = None\n// )\nval csv: String = simpleClass.into\n  .withFieldComputed(_.field1, _ => "hello world")\n  .encode\n// csv: String = "hello world,2,0.4,"\n')),(0,l.kt)("h2",{id:"configuration"},"Configuration"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},"given CSVFormat = DefaultCSVFormat\n")))}p.isMDXComponent=!0}}]);