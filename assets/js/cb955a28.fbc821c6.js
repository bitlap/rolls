"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[43],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var l=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);t&&(l=l.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,l)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,l,r=function(e,t){if(null==e)return{};var n,l,r={},o=Object.keys(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)n=o[l],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=l.createContext({}),c=function(e){var t=l.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return l.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return l.createElement(l.Fragment,{},t)}},d=l.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,g=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return n?l.createElement(g,a(a({ref:t},p),{},{components:n})):l.createElement(g,a({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:r,a[1]=i;for(var c=2;c<o;c++)a[c]=n[c];return l.createElement.apply(null,a)}return l.createElement.apply(null,n)}d.displayName="MDXCreateElement"},379:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var l=n(7462),r=(n(7294),n(3905));const o={title:"Installing Rolls",sidebar_label:"Installing",custom_edit_url:"https://github.com/bitlap/rolls/edit/master/docs/installation.md"},a=void 0,i={unversionedId:"installation",id:"installation",title:"Installing Rolls",description:"Installation using SBT (Recommended)",source:"@site/../rolls-docs/target/mdoc/installation.md",sourceDirName:".",slug:"/installation",permalink:"/rolls/docs/installation",draft:!1,editUrl:"https://github.com/bitlap/rolls/edit/master/docs/installation.md",tags:[],version:"current",frontMatter:{title:"Installing Rolls",sidebar_label:"Installing",custom_edit_url:"https://github.com/bitlap/rolls/edit/master/docs/installation.md"},sidebar:"tutorialSidebar",next:{title:"Quick Start",permalink:"/rolls/docs/quickstart"}},s={},c=[{value:"Installation using SBT (Recommended)",id:"installation-using-sbt-recommended",level:2},{value:"Configuration",id:"configuration",level:2}],p={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,l.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"installation-using-sbt-recommended"},"Installation using SBT (Recommended)"),(0,r.kt)("p",null,"If you are building with sbt, add the following to your ",(0,r.kt)("inlineCode",{parentName:"p"},"build.sbt"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'autoCompilerPlugins := true\naddCompilerPlugin("org.bitlap" %% "rolls-compiler-plugin" % "<version>")\nlibraryDependencies ++= Seq(\n  "org.bitlap" %% "rolls-core" % "<version>", // depends rolls-compiler-plugin\n  "org.bitlap" %% "rolls-csv" % "<version>" // if needed\n)\n')),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"rolls-csv")," does not have any configuration. This configuration only for annotations in ",(0,r.kt)("inlineCode",{parentName:"p"},"rolls-core"),". "),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"rolls-core")," needs to work with ",(0,r.kt)("inlineCode",{parentName:"p"},"rolls-compiler-plugin"),"."),(0,r.kt)("p",null,"Add the following to ",(0,r.kt)("inlineCode",{parentName:"p"},"build.sbt"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'lazy val config =\n  """|classSchema=bitlap.rolls.core.annotations.classSchema\n    |prettyToString=bitlap.rolls.core.annotations.prettyToString\n    |rhsMapping=bitlap.rolls.core.annotations.rhsMapping\n    |customRhsMapping=bitlap.rolls.core.annotations.customRhsMapping\n    |classSchemaFolder=/tmp/.compiler\n    |classSchemaFileName=classSchema_%s.txt\n    |rhsMappingUri=http://localhost:18000/rolls-mapping\n    |classSchemaPostUri=http://localhost:18000/rolls-doc\n    |postClassSchemaToServer=false\n    |classSchemaQueryUri=http://localhost:18000/rolls-schema\n    |stringMask=bitlap.rolls.core.annotations.stringMask\n    |rollsRuntimeClass=bitlap.rolls.core.RollsRuntime\n    |rollsRuntimeToStringMethod=toString_""".stripMargin\n    \nscalacOptions ++= Seq(\n  s"-P:RollsCompilerPlugin:$config"\n)\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The feature with experimental annotations has hardly been tested and is not available.")))}m.isMDXComponent=!0}}]);